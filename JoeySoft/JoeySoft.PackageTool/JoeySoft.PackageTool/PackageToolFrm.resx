<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAEAAAABAAAAAQAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAADAAAABQAAAAcAAAAJAAAADAAAAA8AAAARAAAAEwAA
        ABQAAAAWAAAAFwAAABgAAAAYAAAAFwAAABYAAAAVAAAAEwAAABEAAAAPAAAADQAAAAoAAAAIAAAABQAA
        AAMAAAACAAAAAQAAAAAAAAAAAAAAAAAAAAIAAAAHAAAACwAAABAAAAAVAAAAGgAAAB8AAAAjAAAAKAAA
        ACwAAAAxAAAANQAAADcAAAA6AAAAOwAAADwAAAA7AAAAOQAAADYAAAAyAAAALgAAACoAAAAlAAAAIAAA
        ABsAAAAWAAAAEgAAAA0AAAAIAAAAAwAAAAAAAAAAAAAAAgAAAAUAAAAIAAAADQAAABEAAAAVAAAAGgAA
        AB4AAAAiAAAAJQAAACYAAAArARUKOwIpFE0DMxhZAzMYWQIpFE4BFQo9AAAALQAAACcAAAAnAAAAJAAA
        AB8AAAAbAAAAFwAAABIAAAAOAAAACQAAAAUAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAgAA
        AAMAAQAEAAAABQAAAAQEPx8VBmMwTgdyN5EIgz/ICZBF4wmWSOsJlkjrCZBF4wiDP8gHcTeRBmIvTwQ+
        HhUAAAAEAAAABgABAAUAAAADAAAAAgAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAZoMgAHcjcEB3M4RwiCPrQJnkv0CrdX/wvKYP8M02T/DdZm/w3XZv8M02T/C8pg/wq3
        V/8JnUv0CII+tAdzOEcHczcEBmcyAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAADYZDAAeBPgAHfTwAB3Q4Dgd9PIQJmEjxC75a/xLWa/8d33v/LOaN/zbrmf877aD/PO6g/zbr
        mv8t54//H+B9/xPXbP8Lvlr/CZhI8Qd9PIQHdDgOB308AAeBPgANhkMAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAIhkAAB4E+AAd6OxMHhD+hCaZP/RTQa/8s5Iz/Qu6n/070tv9U9r3/Vfe//1X2
        v/9V9r//VfW+/1T0vP9P8bb/ROuo/y/lkP8W0W3/CaZP/QeEP6EHejsTB4E+AAiGQAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAACIxDAAiFQAAIfz0IB4ZAkAqpUv8i2X3/RvGt/1H2uv956bX/qu7O/6jt
        zP+o68z/qOrL/6jpyv+o58r/qObJ/6rlyv94163/UfO5/0nzsf8l24H/C6pT/weGQJAIfz0ICIVAAAiM
        QwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHg0AACIxDAAiIQWMKok/4KNmE/032tv9T+r7/TPS0/47p
        vP/X9OT/1PPj/9Ty4v/U8eL/1PHh/9Tw4f/U7+H/1+7h/43YtP9L77H/U/q+/0/3uP8t3Yr/C6NQ+AeI
        QWMIjEMAB4NAAAAAAAAAAAAAAAAAAAAAAAAAAAAACJVHAAiORAAHikIcCJdI0CLOef9K9bL/Tve3/033
        t/9M9rT/Se6p/0vrp/9J6aX/Seil/0nnpP9J5qT/SeWj/0jjo/9K46P/SeWl/0z1tP9N97f/Tve3/0v2
        tP8n0oD/CZdI0AeJQRwIjkQACJVHAAAAAAAAAAAAAAAAAAAAAAAIkUQACJRHAAeRRXITsl7/P+2k/0n1
        sf9I9bD/SPWw/0j1sf9E8av/UeWg/2flqv9m46j/ZuCn/2Xepv9l3KX/Ztql/1DTmP9E7qn/SfWx/0j1
        sf9I9bH/SfWx/0LvqP8XtWP/B5FEcgiURwAIkUQAAAAAAAAAAAAAAAAAAAAAAAmYSQAJkkYLCZtKvCbQ
        fv9F86z/SvOu/07zsP9O87D/TPOv/z/sof+m7Mj/+/37//j8+f/4/Pn/+Pv5//j7+f/7/Pv/pd3A/zzk
        nP9E86z/RPKr/0Tyq/9E8qv/RfSs/yvUhf8KnEu8CJFFCwmYSQAAAAAAAAAAAAAAAAAAAAAACZxLAAiZ
        SC8MqFPpN+KU/1jzsv9i87X/ZPO2/2Tztv9k9Lb/VOyo/67uzP//////////////////////////////
        //+q4MT/OOOY/z/xpv8/8aX/P/Gl/z/wpf9A8ab/OOaY/w+qV+kHmEcvCZxLAAAAAAAAAAAAAAAAAAAA
        AAAJoU0ACJ9LVRKxXPxS6qX/afO3/2nztv9o87b/aPO2/2nzt/9c7Kr/r+7N////////////////////
        /////////////6ngxP804ZP/O++g/zrvn/8675//Oe6f/0jwpv9U7aj/FrVh/AeeSlUJoU0AAAAAAAAA
        AAAAAAAAAAAAAAqmTwAHpE1tH7Zk/2bsrv9t8rb/bPG1/2zxtf9s8bX/bfK2/1/rqf+v7sz/////////
        ////////////////////////qeDD/y/fjv817Zr/NeyZ/zTsmf877Zz/XvCu/2fusP8fumf/B6NMbQqm
        TwAAAAAAAAAAAAAAAAAAAAAACqpRAAepT3IftGL/aeir/3Hxtv9x8LX/b/C0/23wsv9s8LL/Xuml/67t
        y/////////////////////////////////+q38P/OtyO/zzpmP876Jf/Ruqe/2DvrP9x8bX/aeqt/x62
        Y/8HqE9yCqpRAAAAAAAAAAAAAAAAAAAAAAALr1QACa5SaBauWv9j3J//d/G2/3PwtP9O6Jj/auml/4Tr
        tf9+5q//y/Pe/////////////////////////////////8vp2f980KT/f9Kn/2LAj/9LwYT/dO6z/3bx
        tv9k4KL/Fq9a/wmuUmgLr1QAAAAAAAAAAAAAAAAAAAAAAAu0VgAKtFZMDaxU+VPIif9777b/e/C2/23t
        rP9y6an/zPXf//3+/f////////////////////////////////////////////39/f/J5NX/b8iZ/2zh
        p/968Lb/e/C2/1LLi/8NrFP5CrRWTAu0VgAAAAAAAAAAAAAAAAAAAAAAC7hYAAu7WSMJsFTgNLBs/3nf
        qv+A8Lf/gPC3/3jusf9t56b/tfDP//v+/f/////////////////////////////////5/Pv/r93E/2vQ
        m/946rD/gPC4/3/wt/964q3/M7Fs/wmwVOALu1kjC7hYAAAAAAAAAAAAAAAAAAAAAAALvVoAC8VeBQq5
        WKsWpVb/acSS/4Tlsv+F8Ln/hu+5/4Lvt/9u5qb/mei9//D79f//////////////////////6/bw/5LW
        sf9u2aH/g+63/4Xvuf+F8Ln/hOe0/2jFkv8WpVb/CrlYqwvFXgULvVoAAAAAAAAAAAAAAAAAAAAAACTw
        fAAMwVwADMNdWAquU/lBrHD/hM2l/4nisv+L7rr/i/C7/4vvuv946Kz/g+Gu/9z15////////////9Tv
        4P9+1KX/eeOr/4vwu/+L8Lv/i++6/4nktP+Dz6X/PKpt/wquU/kMw11YDMFcACTwfAAAAAAAAAAAAAAA
        AAAAAAAADcFdAAzGXwANzGIOC8BbuBOhU/9ouYz/js2q/47Zsf+Q6Ln/ke68/5Lwvv+F67T/ed6m/8Hs
        1P+4583/dtii/4jqtf+S8L7/ke+8/5Hpuf+O27H/js6q/2O3iP8RoFH/C8BcuA3MYg4Mxl8ADcFdAAAA
        AAAAAAAAAAAAAAAAAAAAAAAADMNeAAzLYQAMzmJCCrlY6CSfW/9+wZz/l86v/5XQsP+W2bT/l+K4/5jp
        vP+S6bn/eNuk/3vcpv+U6rv/mOm8/5fiuf+W2rX/ldGw/5fOr/96v5n/IJ1Y/wq5WOgMzmNCDMthAAzD
        XgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMyF4ADtBjAASqUwAN0WRmCrVW9SyfX/+EwqD/oNC2/57P
        tP+e0LT/ntG1/57Ttv+f1bf/n9W3/57Utv+e0rX/ntC0/57PtP+g0Lb/gcCd/yidXP8KtVb1DdFkZgSr
        VAAO0GMADMheAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANz2IADdNlAA7bagUN1WZwCrtZ7iOe
        W/9wtY//ns2z/6TRuP+j0Lf/otC3/6LQtv+i0Lb/otC3/6PQt/+k0bj/ns2z/2+1j/8hnVn/CrtZ7g3V
        ZnAN22oFDdNlAA3PYgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAN02YADdZnAAz/
        eQEN3GlSC8hf0RGqVf87omn/cbSP/5DDp/+dy7L/oc21/6HNtf+fzLP/k8Wq/3W2kv89o2v/EapV/wvI
        X9EO3GlSDP95AQ3WZwAN02YAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAN2GcADdppAAzVZQAP420eDdhnfQrEXdUPsVf4H6Ra/zKiZP8+o2v/QaRt/zakZ/8jpl7/EbJY+ArE
        XdUN2Gd9D+NtHgzVZQAN2mkADdhnAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAP22oAENprAA7caQAKs1cAD+VuGg3fak0L1WWJCs1grgnJXr4KyV6+Cs1grgvV
        ZYkN3mpND+VuGgqzVwAO3GkAENprAA/bagAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADttoAA7baQAO22kADttpAAzAXAAQ/XkED/BzCQ/w
        cwkQ/XkEDMBcAA7baQAO22kADttpAA7baAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABDeawAM2WcADttqAA7b
        aQAO22kADttpAA7baQAO22oADNlnABDeawAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8AAAD/AAAA/gAAAH4AAAB8AA
        AAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPAAAADwAAAA8AAAAPgAAAH4AAAB/AA
        AA/4AAAf/AAAP/4AAH//gAH//+AH//////8=
</value>
  </data>
</root>