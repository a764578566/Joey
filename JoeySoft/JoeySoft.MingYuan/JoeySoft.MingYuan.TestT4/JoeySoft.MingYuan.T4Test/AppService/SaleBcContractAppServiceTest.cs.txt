using Mysoft.Clgyl.SaleMng.AppServices;
using Mysoft.Clgyl.SaleMng.DomainServices;
using Mysoft.Clgyl.SaleMng.DomainServices.Fakes;
using Mysoft.Clgyl.SaleMng.Model;
using Mysoft.Clgyl.Utility;
using Mysoft.Map6.Platform.Services;
using Mysoft.Map6.Platform.Services.Fakes;
using Mysoft.Map6.Platform.Exceptions;
using Mysoft.Map6.Core.Pipeline;
using Mysoft.Map6.TestCore;
using Mysoft.Map6.Core.Tools;
using Mysoft.Map6.Core.EntityBase;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mysoft.Clgyl.SaleMng.UnitTest.AppServices
{
	/// <summary>
    /// 销售补充合同应用服务单测 
    /// </summary>
    [TestFixture]
    public class SaleBcContractAppServiceTest
    {
		private readonly SaleBcContractAppService _saleBcContractAppService = new SaleBcContractAppService();

        private readonly StubFormEntityDomainService _formEntity = new StubFormEntityDomainService();

        private readonly StubSaleBcContractDomainService _saleBcContractDomainService = new StubSaleBcContractDomainService();
        private readonly StubSaleContractAggregateService _saleContractAggregateService = new StubSaleContractAggregateService();
        private readonly StubSaleContractProductDetailApprovalDomainService _saleContractProductDetailApprovalDomainService = new StubSaleContractProductDetailApprovalDomainService();
        private readonly StubSaleContractCompareAmountDomainService _saleContractCompareAmountDomainService = new StubSaleContractCompareAmountDomainService();
        private readonly StubSaleContractDomainService _saleContractDomainService = new StubSaleContractDomainService();
        #region 接口服务
        private readonly StubIContractPublicService _iContractPublicService = new StubIContractPublicService();
        private readonly StubIBcContractPublicService _iBcContractPublicService = new StubIBcContractPublicService();
        private readonly StubIReceivablePublicService _iReceivablePublicService = new StubIReceivablePublicService();
        private readonly StubICommonContractPublicService _iCommonContractPublicService = new StubICommonContractPublicService();
        private readonly StubIProductPricePublicService _iProductPricePublicService = new StubIProductPricePublicService();
        private readonly StubIRecipientPublicService _iRecipientPublicService = new StubIRecipientPublicService();
        private readonly StubIContractInvoicePublicService _iContractInvoicePublicService = new StubIContractInvoicePublicService();
        #endregion

        [SetUp]
        public void InitResource()
        {
            TestMockServiceResolver.RegisterInstance<FormEntityDomainService, StubFormEntityDomainService>(_formEntity);
            TestMockServiceResolver.RegisterInstance<SaleBcContractDomainService, StubSaleBcContractDomainService>(_saleBcContractDomainService);
            TestMockServiceResolver.RegisterInstance<SaleContractAggregateService, StubSaleContractAggregateService>(_saleContractAggregateService);
            TestMockServiceResolver.RegisterInstance<SaleContractProductDetailApprovalDomainService, StubSaleContractProductDetailApprovalDomainService>(_saleContractProductDetailApprovalDomainService);
            TestMockServiceResolver.RegisterInstance<SaleContractCompareAmountDomainService, StubSaleContractCompareAmountDomainService>(_saleContractCompareAmountDomainService);
            TestMockServiceResolver.RegisterInstance<SaleContractDomainService, StubSaleContractDomainService>(_saleContractDomainService);
            TestMockServiceResolver.RegisterInstance<IContractPublicService, StubIContractPublicService>(_iContractPublicService);
            TestMockServiceResolver.RegisterInstance<IBcContractPublicService, StubIBcContractPublicService>(_iBcContractPublicService);
            TestMockServiceResolver.RegisterInstance<IReceivablePublicService, StubIReceivablePublicService>(_iReceivablePublicService);
            TestMockServiceResolver.RegisterInstance<ICommonContractPublicService, StubICommonContractPublicService>(_iCommonContractPublicService);
            TestMockServiceResolver.RegisterInstance<IProductPricePublicService, StubIProductPricePublicService>(_iProductPricePublicService);
            TestMockServiceResolver.RegisterInstance<IRecipientPublicService, StubIRecipientPublicService>(_iRecipientPublicService);
            TestMockServiceResolver.RegisterInstance<IContractInvoicePublicService, StubIContractInvoicePublicService>(_iContractInvoicePublicService);
        }
        #region  销售补充合同应用服务单测 24个方法
        [Test(Description = "保存前校验")]
        public void CheckBeforeSave_Test()
        {
            
        }
        [Test(Description = "保存")]
        public void Save_Test()
        {
            
        }
        [Test(Description = "删除前校验")]
        public void CheckDelete_Test()
        {
            
        }
        [Test(Description = "检查是否关联采购合同")]
        public void CheckIsRelationContract_Test()
        {
            
        }
        [Test(Description = "删除")]
        public void Delete_Test()
        {
            
        }
        [Test(Description = "删除销售合同材料前校验")]
        public void CheckDeleteProduct_Test()
        {
            
        }
        [Test(Description = "删除销售合同材料")]
        public void DeleteProduct_Test()
        {
            
        }
        [Test(Description = "删除全部销售合同材料")]
        public void DeleteAllProducts_Test()
        {
            
        }
        [Test(Description = "校验合同材料明细")]
        public void CheckSaveSaleBcContractProductDetail_Test()
        {
            
        }
        [Test(Description = "更新合同材料")]
        public void SaveSaleBcContractProductDetail_Test()
        {
            
        }
        [Test(Description = "添加销售合同材料明细")]
        public void AddSaleBcContractProductDetail_Test()
        {
            
        }
        [Test(Description = "获取销售补充合同信息")]
        public void FindById_Test()
        {
            
        }
        [Test(Description = "提交审批前")]
        public void BeforeApproving_Test()
        {
            
        }
        [Test(Description = "提交审批后")]
        public void AfterApproving_Test()
        {
            
        }
        [Test(Description = "审批通过后")]
        public void AfterApproved_Test()
        {
            
        }
        [Test(Description = "审批驳回前")]
        public void BeforeUnApprove_Test()
        {
            
        }
        [Test(Description = "审批驳回后")]
        public void AfterUnApprove_Test()
        {
            
        }
        [Test(Description = "关联采购补充合同前校验")]
        public void CheckRelationBcContract_Test()
        {
            
        }
        [Test(Description = "生成采购补充合同前校验")]
        public void CheckCreateBcContract_Test()
        {
            
        }
        [Test(Description = "生成采购补充")]
        public void CreateBcContract_Test()
        {
            
        }
        [Test(Description = "材料价格沉淀")]
        public void SaveProductPrice_Test()
        {
            
        }
        [Test(Description = "根据主合同GUID，找到主合同下所有的补充合同信息")]
        public void GetBcContractsByMasterId_Test()
        {
            
        }
        [Test(Description = "验证补充合同金额与材料是否匹配")]
        public void ValidateSaleBcContractAmountMatched_Test()
        {
            
        }
        [Test(Description = "校验采购补充合同材料明细")]
        public void CheckSaleBcContractProductDetailApproval_Test()
        {
            
        }
        #endregion
	}
}