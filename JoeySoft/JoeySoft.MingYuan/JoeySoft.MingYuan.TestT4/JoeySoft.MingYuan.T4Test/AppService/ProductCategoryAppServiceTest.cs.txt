using Mysoft.Clgyl.ProductMng.AppServices;
using Mysoft.Clgyl.ProductMng.DomainServices;
using Mysoft.Clgyl.ProductMng.DomainServices.Fakes;
using Mysoft.Clgyl.ProductMng.Model;
using Mysoft.Clgyl.Utility;
using Mysoft.Map6.Platform.Services;
using Mysoft.Map6.Platform.Services.Fakes;
using Mysoft.Map6.Platform.Exceptions;
using Mysoft.Map6.Core.Pipeline;
using Mysoft.Map6.TestCore;
using Mysoft.Map6.Core.Tools;
using Mysoft.Map6.Core.EntityBase;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mysoft.Clgyl.ProductMng.UnitTest.AppServices
{
	/// <summary>
    /// 材料类别应用服务单测 
    /// </summary>
    [TestFixture]
    public class ProductCategoryAppServiceTest
    {
		private readonly ProductCategoryAppService _productCategoryAppService = new ProductCategoryAppService();

        private readonly StubFormEntityDomainService _formEntity = new StubFormEntityDomainService();

        private readonly EntityMocker<ProductCategory> _productCategoryMock = new EntityMocker<ProductCategory>();
        
        private readonly StubProductCategoryDomainService _productCategoryDomainService = new StubProductCategoryDomainService();
        private readonly StubProductCategoryAttributeDomainService _productCategoryAttributeDomainService = new StubProductCategoryAttributeDomainService();
        private readonly StubProductDomainService _productDomainService = new StubProductDomainService();
        #region 接口服务
        private readonly StubICommonPublicService _iCommonPublicService = new StubICommonPublicService();
        #endregion

        [SetUp]
        public void InitResource()
        {
            TestMockServiceResolver.RegisterInstance<FormEntityDomainService, StubFormEntityDomainService>(_formEntity);
            TestMockServiceResolver.RegisterInstance<ProductCategoryDomainService, StubProductCategoryDomainService>(_productCategoryDomainService);
            TestMockServiceResolver.RegisterInstance<ProductCategoryAttributeDomainService, StubProductCategoryAttributeDomainService>(_productCategoryAttributeDomainService);
            TestMockServiceResolver.RegisterInstance<ProductDomainService, StubProductDomainService>(_productDomainService);
            TestMockServiceResolver.RegisterInstance<ICommonPublicService, StubICommonPublicService>(_iCommonPublicService);
        }

        [Test(Description = "保存校验")]
        public void Save_Test()
        {
            
        }
        [Test(Description = "分类保存事务")]
        public void SaveTrans_Test()
        {
            
        }
        [Test(Description = "保存材料分类属性")]
        public void SaveProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "删除前校验")]
        public void CheckBeforeDelete_Test()
        {
            
        }
        [Test(Description = "删除材料属性")]
        public void CheckBeforeDeleteAttribute_Test()
        {
            
        }
        [Test(Description = "获取材料分类属性是否被引用")]
        public void GetProductCategoryAttributeIsUsed_Test()
        {
            
        }
        [Test(Description = "删除材料属性值")]
        public void CheckBeforeDeleteAttributeValue_Test()
        {
            
        }
        [Test(Description = "是否可以修改属性值")]
        public void CheckBeforeUpdateAttributeValue_Test()
        {
            
        }
        [Test(Description = "删除")]
        public void Delete_Test()
        {
            
        }
        [Test(Description = "删除材料分类属性")]
        public void DeleteAttribute_Test()
        {
            
        }
        [Test(Description = "保存材料分类属性")]
        public void UpdateParent_Test()
        {
            
        }
        [Test(Description = "新增子级前校验")]
        public void CheckAddChild_Test()
        {
            
        }
        [Test(Description = "获取材料分类属性值列表")]
        public void GetProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "获取材料分类属性值列表")]
        public void GetProductCategoryAttributeValueByproductCategoryGuid_Test()
        {
            
        }
        [Test(Description = "判断末级节点")]
        public void IsLeaf_Test()
        {
            
        }
        [Test(Description = "根据productCategoryGUID获取entity")]
        public void FindProductCategoryById_Test()
        {
            
        }
        [Test(Description = "根据productCategoryGUID获取entity")]
        public void GetLastCode_Test()
        {
            
        }
        [Test(Description = "导入前校验材料分类")]
        public void CheckImport_Test()
        {
            
        }
        [Test(Description = "导入材料分类")]
        public void Import_Test()
        {
            
        }
        [Test(Description = "导入执行")]
        public void ImportExecute_Test()
        {
            
        }
        [Test(Description = "在数据添加前校验自己里面数据的正确性")]
        public void CheckImport``1_Test()
        {
            
        }
        [Test(Description = "将entity转DTO")]
        public void ConvertProductCategoryAttributeValueOutputDTO_Test()
        {
            
        }
        [Test(Description = "更新材料分类属性信息")]
        public void UpdateProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "合并材料分类指标属性")]
        public void MergeProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "合并属性值")]
        public void MergeProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "创建材料分类属性值")]
        public void CreateProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "创建材料分类属性和属性值")]
        public void CreateProductCategoryAttributeAndValue_Test()
        {
            
        }
        [Test(Description = "校验材料属性是否已经使用在该材料中")]
        public void CheckAddedProductCategoryAttributeAndValue_Test()
        {
            
        }
        [Test(Description = "获取材料分类")]
        public void GetProductCategory_Test()
        {
            
        }
        [Test(Description = "获取材料分类")]
        public void GetProductCategoryByApi_Test()
        {
            
        }
	}
}