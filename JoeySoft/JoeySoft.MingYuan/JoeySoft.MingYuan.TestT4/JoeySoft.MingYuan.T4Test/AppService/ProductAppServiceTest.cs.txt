using Mysoft.Clgyl.ProductMng.AppServices;
using Mysoft.Clgyl.ProductMng.DomainServices;
using Mysoft.Clgyl.ProductMng.DomainServices.Fakes;
using Mysoft.Clgyl.ProductMng.Model;
using Mysoft.Clgyl.Utility;
using Mysoft.Map6.Platform.Services;
using Mysoft.Map6.Platform.Services.Fakes;
using Mysoft.Map6.Platform.Exceptions;
using Mysoft.Map6.Core.Pipeline;
using Mysoft.Map6.TestCore;
using Mysoft.Map6.Core.Tools;
using Mysoft.Map6.Core.EntityBase;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mysoft.Clgyl.ProductMng.UnitTest.AppServices
{
	/// <summary>
    /// 材料管理应用服务单测 
    /// </summary>
    [TestFixture]
    public class ProductAppServiceTest
    {
		private readonly ProductAppService _productAppService = new ProductAppService();

        private readonly StubFormEntityDomainService _formEntity = new StubFormEntityDomainService();

        private readonly EntityMocker<Product> _productMock = new EntityMocker<Product>();
        
        private readonly StubProductDomainService _productDomainService = new StubProductDomainService();
        private readonly StubProductCategoryDomainService _productCategoryDomainService = new StubProductCategoryDomainService();
        private readonly StubProductImportDomainService _productImportDomainService = new StubProductImportDomainService();
        private readonly StubProductCategoryAttributeDomainService _productCategoryAttributeDomainService = new StubProductCategoryAttributeDomainService();
        #region 接口服务
        private readonly StubIApplyPublicService _iApplyPublicService = new StubIApplyPublicService();
        private readonly StubITacticCgAgreementPublicService _iTacticCgAgreementPublicService = new StubITacticCgAgreementPublicService();
        private readonly StubIContractPublicService _iContractPublicService = new StubIContractPublicService();
        private readonly StubIProjectOverviewPublicService _iProjectOverviewPublicService = new StubIProjectOverviewPublicService();
        private readonly StubIProductRequirementPublicService _iProductRequirementPublicService = new StubIProductRequirementPublicService();
        private readonly StubISaleContractPublicService _iSaleContractPublicService = new StubISaleContractPublicService();
        private readonly StubIProviderPublicService _iProviderPublicService = new StubIProviderPublicService();
        private readonly StubICommonPublicService _iCommonPublicService = new StubICommonPublicService();
        #endregion

        [SetUp]
        public void InitResource()
        {
            TestMockServiceResolver.RegisterInstance<FormEntityDomainService, StubFormEntityDomainService>(_formEntity);
            TestMockServiceResolver.RegisterInstance<ProductDomainService, StubProductDomainService>(_productDomainService);
            TestMockServiceResolver.RegisterInstance<ProductCategoryDomainService, StubProductCategoryDomainService>(_productCategoryDomainService);
            TestMockServiceResolver.RegisterInstance<ProductImportDomainService, StubProductImportDomainService>(_productImportDomainService);
            TestMockServiceResolver.RegisterInstance<ProductCategoryAttributeDomainService, StubProductCategoryAttributeDomainService>(_productCategoryAttributeDomainService);
            TestMockServiceResolver.RegisterInstance<IApplyPublicService, StubIApplyPublicService>(_iApplyPublicService);
            TestMockServiceResolver.RegisterInstance<ITacticCgAgreementPublicService, StubITacticCgAgreementPublicService>(_iTacticCgAgreementPublicService);
            TestMockServiceResolver.RegisterInstance<IContractPublicService, StubIContractPublicService>(_iContractPublicService);
            TestMockServiceResolver.RegisterInstance<IProjectOverviewPublicService, StubIProjectOverviewPublicService>(_iProjectOverviewPublicService);
            TestMockServiceResolver.RegisterInstance<IProductRequirementPublicService, StubIProductRequirementPublicService>(_iProductRequirementPublicService);
            TestMockServiceResolver.RegisterInstance<ISaleContractPublicService, StubISaleContractPublicService>(_iSaleContractPublicService);
            TestMockServiceResolver.RegisterInstance<IProviderPublicService, StubIProviderPublicService>(_iProviderPublicService);
            TestMockServiceResolver.RegisterInstance<ICommonPublicService, StubICommonPublicService>(_iCommonPublicService);
        }

        [Test(Description = "保存材料")]
        public void Save_Test()
        {
            
        }
        [Test(Description = "校验编码重复")]
        public void VerifyCode_Test()
        {
            
        }
        [Test(Description = "保存前校验")]
        public void VerifyToSave_Test()
        {
            
        }
        [Test(Description = "获取材料编码")]
        public void GetCodeByCategoryGuid_Test()
        {
            
        }
        [Test(Description = "根据材料属性GUID，获取属性值")]
        public void GetProductCategoryAttributeValueByAttributeGuid_Test()
        {
            
        }
        [Test(Description = "更改材料状态为“启用”状态")]
        public void UpdateProductEnabledByProductGuid_Test()
        {
            
        }
        [Test(Description = "更改材料状态为“禁用”状态")]
        public void UpdateProductDisableByProductGuid_Test()
        {
            
        }
        [Test(Description = "批量禁用")]
        public void Disables_Test()
        {
            
        }
        [Test(Description = "批量启用")]
        public void Enables_Test()
        {
            
        }
        [Test(Description = "根据类型ID获取材料类型指标属性type=选项的类型指标、类型指标值")]
        public void GetAttributeValueCategoryId_Test()
        {
            
        }
        [Test(Description = "根据productCategoryGUID获取entity")]
        public void FindProductCategoryById_Test()
        {
            
        }
        [Test(Description = "根据材料Id获取对应的分类属性值")]
        public void GetProductAttributeValueByProductId_Test()
        {
            
        }
        [Test(Description = "删除材料、材料属性值信息")]
        public void CheckDelete_Test()
        {
            
        }
        [Test(Description = "删除材料、材料属性值信息")]
        public void Delete_Test()
        {
            
        }
        [Test(Description = "删除材料、材料属性值信息")]
        public void DelProducts_Test()
        {
            
        }
        [Test(Description = "批量删除前验证")]
        public void CheckDeletes_Test()
        {
            
        }
        [Test(Description = "判断是存在子级分类")]
        public void IsExsitSubsetProductCategory_Test()
        {
            
        }
        [Test(Description = "根据指标属性值ID获取材料ID,用于高级搜索")]
        public void GetListByAttributeValueGuids_Test()
        {
            
        }
        [Test(Description = "获取材料")]
        public void GetProducts_Test()
        {
            
        }
        [Test(Description = "合同选择材料使用")]
        public void GetProductsUseForContract_Test()
        {
            
        }
        [Test(Description = "根据材料属性值获取材料ID")]
        public void GetProductGuids_Test()
        {
            
        }
        [Test(Description = "根据ProductGUID获取材料信息")]
        public void GetProductByProductGuid_Test()
        {
            
        }
        [Test(Description = "根据全编码获取该编码下所有子级GUID")]
        public void GetListByAllCode_Test()
        {
            
        }
        [Test(Description = "获取模板地址")]
        public void GetProductTemplatePath_Test()
        {
            
        }
        [Test(Description = "生成导出模版")]
        public void GetProductImportTemplate_Test()
        {
            
        }
        [Test(Description = "导入材料")]
        public void ProductImport_Test()
        {
            
        }
        [Test(Description = "材料导入校验")]
        public void ProductImportCheck_Test()
        {
            
        }
        [Test(Description = "成功处理")]
        public void ProductImportSuccessHandle_Test()
        {
            
        }
        [Test(Description = "失败处理")]
        public void ProductImportErrorHandle_Test()
        {
            
        }
        [Test(Description = "获取execl中的材料导入数据")]
        public void GetExeclData_Test()
        {
            
        }
        [Test(Description = "使用区域校验")]
        public void ProductBuNameCheck_Test()
        {
            
        }
        [Test(Description = "供应商校验")]
        public void ProductProviderCheck_Test()
        {
            
        }
        [Test(Description = "导入材料图片")]
        public void ImportPicture_Test()
        {
            
        }
        [Test(Description = "上传材料图片，修改材料图片")]
        public void PictureUpload_Test()
        {
            
        }
        [Test(Description = "读取压缩包中的图片名称与图片流信息")]
        public void GetPictureInfo_Test()
        {
            
        }
        [Test(Description = "校验导入图片信息")]
        public void ValidationPicture_Test()
        {
            
        }
        [Test(Description = "获取材料图片导入错误列头信息")]
        public void GetProductPictrueErrorColumnsName_Test()
        {
            
        }
        [Test(Description = "图片批量上传")]
        public void SaveProductPicturesAsync_Test()
        {
            
        }
	}
}