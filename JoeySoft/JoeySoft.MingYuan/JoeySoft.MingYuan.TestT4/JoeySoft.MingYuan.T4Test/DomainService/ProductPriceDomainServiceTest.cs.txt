using Mysoft.Clgyl.ProductMng.DomainServices;
using Mysoft.Clgyl.ProductMng.DomainServices.Fakes;
using Mysoft.Clgyl.ProductMng.Model;
using Mysoft.Clgyl.Utility;
using Mysoft.Map6.Platform.Services;
using Mysoft.Map6.Platform.Services.Fakes;
using Mysoft.Map6.Platform.Exceptions;
using Mysoft.Map6.Core.Pipeline;
using Mysoft.Map6.TestCore;
using Mysoft.Map6.Core.Tools;
using Mysoft.Map6.Core.EntityBase;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mysoft.Clgyl.ProductMng.UnitTest.DomainServices
{
	/// <summary>
    /// 材料价格库领域服务单测
    /// </summary>
    [TestFixture]
    public class ProductPriceDomainServiceTest
    {
		private readonly ProductPriceDomainService _productPriceDomainService = new ProductPriceDomainService();

        private readonly EntityMocker<ProductPrice> _productPriceMock = new EntityMocker<ProductPrice>();
        
        private readonly StubFormEntityDomainService _formEntity = new StubFormEntityDomainService();
        private readonly StubProductDomainService _productDomainService = new StubProductDomainService();
        #region 接口服务
        #endregion

        private readonly string _productPriceFileJsonName = "ProductPrice.json";

        [SetUp]
        public void InitResource()
        {
            TestMockServiceResolver.RegisterInstance<FormEntityDomainService, StubFormEntityDomainService>(_formEntity);
            TestMockServiceResolver.RegisterInstance<ProductDomainService, StubProductDomainService>(_productDomainService);
            _productPriceMock.LoadData(_productPriceFileJsonName);
        }

        #region  材料价格库领域服务单测 14个方法
        [Test(Description = "编码唯一性")]
        public void BusinessParamCodeValication_Test()
        {
            
        }
        [Test(Description = "保存材料价格业务场景")]
        public void SaveBusinessParam_Test()
        {
            
        }
        [Test(Description = "业务场景是否被材料价格引用")]
        public void IsUsedBusinessParam_Test()
        {
            
        }
        [Test(Description = "业务场景是否被材料价格引用")]
        public void DeleteBusinessParam_Test()
        {
            
        }
        [Test(Description = "设置默认值")]
        public void SetDefaultValue_Test()
        {
            
        }
        [Test(Description = "取消默认值")]
        public void CancelDefaultValue_Test()
        {
            
        }
        [Test(Description = "根据业务场景编码获取场景信息")]
        public void FindByCode_Test()
        {
            
        }
        [Test(Description = "添加材料价格")]
        public void SaveProductPrice_Test()
        {
            
        }
        [Test(Description = "批量创建材料价格信息")]
        public void BulkCreateProductPrice_Test()
        {
            
        }
        [Test(Description = "根据业务ID删除价格信息")]
        public void DeleteBySourceID_Test()
        {
            
        }
        [Test(Description = "删除指定来源，指定材料的价格沉淀")]
        public void DeleteBySourceIDAndProductID_Test()
        {
            
        }
        [Test(Description = "获取删除跟新增材料价格明细数据，同时更新最新的材料价格")]
        public void GetAndUpdateProductPriceDetail_Test()
        {
            
        }
        [Test(Description = "更新材料价格信息")]
        public void UpdateProductPrice_Test()
        {
            
        }
        [Test(Description = "材料价格DTO转entity")]
        public void ConvertProductPriceDtoToEntity_Test()
        {
            
        }
       #endregion
	}
}