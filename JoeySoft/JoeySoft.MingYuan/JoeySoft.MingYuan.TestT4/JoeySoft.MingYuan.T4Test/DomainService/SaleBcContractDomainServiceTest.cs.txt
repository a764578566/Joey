using Mysoft.Clgyl.SaleMng.DomainServices;
using Mysoft.Clgyl.SaleMng.DomainServices.Fakes;
using Mysoft.Clgyl.SaleMng.Model;
using Mysoft.Clgyl.Utility;
using Mysoft.Map6.Platform.Services;
using Mysoft.Map6.Platform.Services.Fakes;
using Mysoft.Map6.Platform.Exceptions;
using Mysoft.Map6.Core.Pipeline;
using Mysoft.Map6.TestCore;
using Mysoft.Map6.Core.Tools;
using Mysoft.Map6.Core.EntityBase;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mysoft.Clgyl.SaleMng.UnitTest.DomainServices
{
	/// <summary>
    /// 销售补充合同领域服务单测
    /// </summary>
    [TestFixture]
    public class SaleBcContractDomainServiceTest
    {
		private readonly SaleBcContractDomainService _saleBcContractDomainService = new SaleBcContractDomainService();

        private readonly EntityMocker<SaleBcContract> _saleBcContractMock = new EntityMocker<SaleBcContract>();
        private readonly EntityMocker<SaleContractOrderInfo> _saleContractOrderInfoMock = new EntityMocker<SaleContractOrderInfo>();
        private readonly EntityMocker<SaleContract2Contract> _saleContract2ContractMock = new EntityMocker<SaleContract2Contract>();
        private readonly EntityMocker<SaleContractProductDetail> _saleContractProductDetailMock = new EntityMocker<SaleContractProductDetail>();
        private readonly EntityMocker<SaleBcContractTaxItem> _saleBcContractTaxItemMock = new EntityMocker<SaleBcContractTaxItem>();
        

        private readonly StubFormEntityDomainService _formEntity = new StubFormEntityDomainService();
        private readonly StubSaleContractDomainService _saleContractDomainService = new StubSaleContractDomainService();
        private readonly StubSaleBcContractInitialFillinDomainService _saleBcContractInitialFillinDomainService = new StubSaleBcContractInitialFillinDomainService();
        private readonly StubSaleContractAggregateService _saleContractAggregateService = new StubSaleContractAggregateService();

        #region 接口服务
        private readonly StubIWorkflowPublicService _iWorkflowPublicService = new StubIWorkflowPublicService();
        private readonly StubICommonContractPublicService _iCommonContractPublicService = new StubICommonContractPublicService();
        private readonly StubIBusinessUnitPublicService _iBusinessUnitPublicService = new StubIBusinessUnitPublicService();
        private readonly StubIContractPublicService _iContractPublicService = new StubIContractPublicService();
        private readonly StubIBcContractPublicService _iBcContractPublicService = new StubIBcContractPublicService();
        private readonly StubICodeFormatPublicService _iCodeFormatPublicService = new StubICodeFormatPublicService();
        private readonly StubIPricePolicyPublicService _iPricePolicyPublicService = new StubIPricePolicyPublicService();
        private readonly StubILogPublicService _iLogPublicService = new StubILogPublicService();
        private readonly StubIContractTypePubilcService _iContractTypePubilcService = new StubIContractTypePubilcService();
        private readonly StubIRecipientPublicService _iRecipientPublicService = new StubIRecipientPublicService();
        private readonly StubIReceivablePublicService _iReceivablePublicService = new StubIReceivablePublicService();
        private readonly StubIContractInvoicePublicService _iContractInvoicePublicService = new StubIContractInvoicePublicService();
        private readonly StubICommonPublicService _iCommonPublicService = new StubICommonPublicService();
        private readonly StubIProductPublicService _iProductPublicService = new StubIProductPublicService();
        #endregion

        private readonly string _saleBcContractFileJsonName = "SaleBcContract.json";
        private readonly string _saleContractOrderInfoFileJsonName = "SaleContractOrderInfo.json";
        private readonly string _saleContract2ContractFileJsonName = "SaleContract2Contract.json";
        private readonly string _saleContractProductDetailFileJsonName = "SaleContractProductDetail.json";
        private readonly string _saleBcContractTaxItemFileJsonName = "SaleBcContractTaxItem.json";
  
        [SetUp]
        public void InitResource()
        {
            TestMockServiceResolver.RegisterInstance<FormEntityDomainService, StubFormEntityDomainService>(_formEntity);
            TestMockServiceResolver.RegisterInstance<SaleContractDomainService, StubSaleContractDomainService>(_saleContractDomainService);
            TestMockServiceResolver.RegisterInstance<SaleBcContractInitialFillinDomainService, StubSaleBcContractInitialFillinDomainService>(_saleBcContractInitialFillinDomainService);
            TestMockServiceResolver.RegisterInstance<IWorkflowPublicService, StubIWorkflowPublicService>(_iWorkflowPublicService);
            TestMockServiceResolver.RegisterInstance<ICommonContractPublicService, StubICommonContractPublicService>(_iCommonContractPublicService);
            TestMockServiceResolver.RegisterInstance<IBusinessUnitPublicService, StubIBusinessUnitPublicService>(_iBusinessUnitPublicService);
            TestMockServiceResolver.RegisterInstance<IContractPublicService, StubIContractPublicService>(_iContractPublicService);
            TestMockServiceResolver.RegisterInstance<IBcContractPublicService, StubIBcContractPublicService>(_iBcContractPublicService);
            TestMockServiceResolver.RegisterInstance<ICodeFormatPublicService, StubICodeFormatPublicService>(_iCodeFormatPublicService);
            TestMockServiceResolver.RegisterInstance<IPricePolicyPublicService, StubIPricePolicyPublicService>(_iPricePolicyPublicService);
            TestMockServiceResolver.RegisterInstance<ILogPublicService, StubILogPublicService>(_iLogPublicService);
            TestMockServiceResolver.RegisterInstance<IContractTypePubilcService, StubIContractTypePubilcService>(_iContractTypePubilcService);
            TestMockServiceResolver.RegisterInstance<SaleContractAggregateService, StubSaleContractAggregateService>(_saleContractAggregateService);
            TestMockServiceResolver.RegisterInstance<IRecipientPublicService, StubIRecipientPublicService>(_iRecipientPublicService);
            TestMockServiceResolver.RegisterInstance<IReceivablePublicService, StubIReceivablePublicService>(_iReceivablePublicService);
            TestMockServiceResolver.RegisterInstance<IContractInvoicePublicService, StubIContractInvoicePublicService>(_iContractInvoicePublicService);
            TestMockServiceResolver.RegisterInstance<ICommonPublicService, StubICommonPublicService>(_iCommonPublicService);
            TestMockServiceResolver.RegisterInstance<IProductPublicService, StubIProductPublicService>(_iProductPublicService);
            _saleBcContractMock.LoadData(_saleBcContractFileJsonName);
            _saleContractOrderInfoMock.LoadData(_saleContractOrderInfoFileJsonName);
            _saleContract2ContractMock.LoadData(_saleContract2ContractFileJsonName);
            _saleContractProductDetailMock.LoadData(_saleContractProductDetailFileJsonName);
            _saleBcContractTaxItemMock.LoadData(_saleBcContractTaxItemFileJsonName);
 
        }

        #region  销售补充合同领域服务单测 40个方法
        [Test(Description = "保存前校验")]
        public void CheckSave_Test()
        {
            
        }

        [Test(Description = "保存")]
        public void Save_Test()
        {
            
        }

        [Test(Description = "保存事务")]
        public void SaveTrans_Test()
        {
            
        }

        [Test(Description = "更新材料金额（含税）合计")]
        public void UpdateProductDetailAmount_Test()
        {
            
        }

        [Test(Description = "更新冗余字段")]
        public void UpdateRedundancy_Test()
        {
            
        }

        [Test(Description = "删除前校验")]
        public void CheckDelete_Test()
        {
            
        }

        [Test(Description = "删除事务方法")]
        public void DeleteTrans_Test()
        {
            
        }

        [Test(Description = "删除")]
        public void Delete_Test()
        {
            
        }

        [Test(Description = "根据销售合同GUID，得到销售合同和采购合同关联表数据")]
        public void GetSaleContract2ContractBySaleBcContractGuid_Test()
        {
            
        }

        [Test(Description = "销售合同金额校验")]
        public void VerifyTotalAmountBybcContractGUID_Test()
        {
            
        }

        [Test(Description = "校验合同编码是否存在")]
        public void IsExistsContractCode_Test()
        {
            
        }

        [Test(Description = "采购合同是否已经生成销售合同")]
        public void IsUserByContractGUID_Test()
        {
            
        }

        [Test(Description = "提交审批前")]
        public void BeforeApproving_Test()
        {
            
        }

        [Test(Description = "提交审批后")]
        public void AfterApproving_Test()
        {
            
        }

        [Test(Description = "审批通过后")]
        public void AfterApproved_Test()
        {
            
        }

        [Test(Description = "审批驳回前")]
        public void BeforeUnApprove_Test()
        {
            
        }

        [Test(Description = "审批驳回后")]
        public void AfterUnApprove_Test()
        {
            
        }

        [Test(Description = "根据销售合同guid判断是否存在销售补充合同")]
        public void IsExistSaleBcContractBySaleContractGUID_Test()
        {
            
        }

        [Test(Description = "根据销售合同guid判断是否存在在途的销售补充合同")]
        public void IsExistSaleBcContractIsPendingOrApprovingBySaleContractGUID_Test()
        {
            
        }

        [Test(Description = "得到销售补充合同税目")]
        public void GetSaleBcContractTaxItemsBySaleBcContractGUID_Test()
        {
            
        }

        [Test(Description = "根据主合同GUID，找到主合同下所有的补充合同信息")]
        public void GetBcContractsByMasterContractGUID_Test()
        {
            
        }

        [Test(Description = "更新补充销售合同信息")]
        public void UpdateSaleBcContract_Test()
        {
            
        }

        [Test(Description = "根据主键GUID，得到销售补充合同实体数据")]
        public void FindById_Test()
        {
            
        }

        [Test(Description = "根据主合同得到最后创建的销售补充合同")]
        public void GetLastSaleBcContractByMasterContractGUID_Test()
        {
            
        }

        [Test(Description = "生成销售合同前校验")]
        public void CheckCreateSaleContractByContract_Test()
        {
            
        }

        [Test(Description = "采购补充合同转销售补充合同")]
        public void ConvertSaleBcContractByBcContract_Test()
        {
            
        }

        [Test(Description = "生成销售合同编码")]
        public void GetCodeSerialNumber_Test()
        {
            
        }

        [Test(Description = "采购补充合同明细转销售补充合同明细")]
        public void ConvertSaleContractProductsByContractProducts_Test()
        {
            
        }

        [Test(Description = "采购补充转销售补充赋值MasterDetailGUID")]
        public void ConvertMasterDetailGUID_Test()
        {
            
        }

        [Test(Description = "根据采购合同生成销售合同")]
        public void CreateSaleBcContractByBcContract_Test()
        {
            
        }

        [Test(Description = "根据采购合同生成销售合同事务方法")]
        public void CreateSaleBcContractByBcContractTrans_Test()
        {
            
        }

        [Test(Description = "采购合同订单信息转销售合同订单信息")]
        public void ConvertSaleContractOrderInfoByBcContractGUID_Test()
        {
            
        }

        [Test(Description = "关联采购补充合同前校验")]
        public void CheckRelationBcContract_Test()
        {
            
        }

        [Test(Description = "生成采购补充合同前校验")]
        public void CheckCreateBcContract_Test()
        {
            
        }

        [Test(Description = "生成采购补充合同事务方法")]
        public void CreateBcContractTrans_Test()
        {
            
        }

        [Test(Description = "生成采购补充合同")]
        public void CreateBcContract_Test()
        {
            
        }

        [Test(Description = "生成日志")]
        public void CreateCompareLog_Test()
        {
            
        }

        [Test(Description = "生成日志")]
        public void CreateLog_Test()
        {
            
        }

        [Test(Description = "创建采购补充合同转销售补充合同日志")]
        public void CreateConversionLog_Test()
        {
            
        }

        [Test(Description = "获取更改日志的比较本文")]
        public void GetLogCompareString_Test()
        {
            
        }

       #endregion
	}
}