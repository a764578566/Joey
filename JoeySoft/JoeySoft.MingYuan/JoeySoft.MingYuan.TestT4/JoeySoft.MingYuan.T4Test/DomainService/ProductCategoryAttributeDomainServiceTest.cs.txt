using Mysoft.Clgyl.ProductMng.DomainServices;
using Mysoft.Clgyl.ProductMng.DomainServices.Fakes;
using Mysoft.Clgyl.ProductMng.Model;
using Mysoft.Clgyl.Utility;
using Mysoft.Map6.Platform.Services;
using Mysoft.Map6.Platform.Services.Fakes;
using Mysoft.Map6.Platform.Exceptions;
using Mysoft.Map6.Core.Pipeline;
using Mysoft.Map6.TestCore;
using Mysoft.Map6.Core.Tools;
using Mysoft.Map6.Core.EntityBase;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mysoft.Clgyl.ProductMng.UnitTest.DomainServices
{
	/// <summary>
    /// 材料类别领域服务单测
    /// </summary>
    [TestFixture]
    public class ProductCategoryAttributeDomainServiceTest
    {
		private readonly ProductCategoryAttributeDomainService _productCategoryAttributeDomainService = new ProductCategoryAttributeDomainService();

        private readonly EntityMocker<ProductCategoryAttribute> _productCategoryAttributeMock = new EntityMocker<ProductCategoryAttribute>();
        
        private readonly StubFormEntityDomainService _formEntity = new StubFormEntityDomainService();
        private readonly StubProductDomainService _productDomainService = new StubProductDomainService();
        private readonly StubProductCategoryDomainService _productCategoryDomainService = new StubProductCategoryDomainService();
        #region 接口服务
        #endregion

        private readonly string _productCategoryAttributeFileJsonName = "ProductCategoryAttribute.json";

        [SetUp]
        public void InitResource()
        {
            TestMockServiceResolver.RegisterInstance<FormEntityDomainService, StubFormEntityDomainService>(_formEntity);
            TestMockServiceResolver.RegisterInstance<ProductDomainService, StubProductDomainService>(_productDomainService);
            TestMockServiceResolver.RegisterInstance<ProductCategoryDomainService, StubProductCategoryDomainService>(_productCategoryDomainService);
            _productCategoryAttributeMock.LoadData(_productCategoryAttributeFileJsonName);
        }

        #region  材料类别领域服务单测 33个方法
        [Test(Description = "获取材料类别属性列表")]
        public void GetCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "更新材料分类属性信息")]
        public void UpdateProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "删除材料分类属性")]
        public void DeleteAttribute_Test()
        {
            
        }
        [Test(Description = "材料类别保存")]
        public void SaveProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "根据类型ID获取材料类型指标属性type=选项的类型指标、类型指标值")]
        public void GetAttributeValueCategoryId_Test()
        {
            
        }
        [Test(Description = "合并材料分类指标属性")]
        public void MergeProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "验证产品分类属性，如果两个属性同时被一个材料使用则不允许合并")]
        public void ValidationProductAttributeValue_Test()
        {
            
        }
        [Test(Description = "合并属性处理")]
        public void MergeProductCategoryAttributeHandle_Test()
        {
            
        }
        [Test(Description = "冗余字段刷新")]
        public void RedundancyFiledRefreshByMergeProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "合并材料分类指标属性事务")]
        public void MergeProductCategoryAttributeTrans_Test()
        {
            
        }
        [Test(Description = "获取材料类别属性值列表")]
        public void GetProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "获取材料类别属性值列表")]
        public void GetProductCategoryAttributeValueByProductCategoryGuid_Test()
        {
            
        }
        [Test(Description = "根据材料属性主键，获取未被禁用的属性值")]
        public void GetEnableAttributeValueByAttributeGuid_Test()
        {
            
        }
        [Test(Description = "根据材料属性主键，获取所有属性值")]
        public void GetAllAttributeValueByAttributeGuid_Test()
        {
            
        }
        [Test(Description = "合并属性值")]
        public void MergeProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "获取新产品分类属性值")]
        public void GetNewProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "移除产品分类属性值")]
        public void RemoveProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "产品属性值刷新")]
        public void ProductAttributeValueRefresh_Test()
        {
            
        }
        [Test(Description = "冗余字段刷新")]
        public void RedundancyFiledRefreshByMergeProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "合并属性值事务")]
        public void MergeProductCategoryAttributeValueTrans_Test()
        {
            
        }
        [Test(Description = "创建材料分类属性值")]
        public void CreateProductCategoryAttributeValue_Test()
        {
            
        }
        [Test(Description = "创建材料分类属性值（事务）")]
        public void CreateProductCategoryAttributeValueTrans_Test()
        {
            
        }
        [Test(Description = "创建材料分类属性和属性值（事务）")]
        public void CreateProductCategoryAttributeAndValueTrans_Test()
        {
            
        }
        [Test(Description = "依据分类与属性名查找属性")]
        public void GetProductCategoryAttributeByCategoryGUID_Test()
        {
            
        }
        [Test(Description = "创建材料分类属性，这个方法用于材料页面新增属性")]
        public void CreateProductCategoryAttribute_Test()
        {
            
        }
        [Test(Description = "设置分类属性冗余字段")]
        public void SetProductCategoryAttributeRedundancyFields_Test()
        {
            
        }
        [Test(Description = "创建材料分类属性和属性值（事务）")]
        public void CreateProductCategoryAttributeTrans_Test()
        {
            
        }
        [Test(Description = "如果分类属性存在那么更新")]
        public void UpdateProductCategoryAttributeTrans_Test()
        {
            
        }
        [Test(Description = "删除分类对应的指标属性")]
        public void DeleteProductCategoryAttributeByCategoryGUID_Test()
        {
            
        }
        [Test(Description = "批量更新材料属性")]
        public void SaveAttribute_Test()
        {
            
        }
        [Test(Description = "批量插入材料属性")]
        public void BulkInsertAttribute_Test()
        {
            
        }
        [Test(Description = "批量更新材料属性值")]
        public void SaveAttributeValue_Test()
        {
            
        }
        [Test(Description = "批量插入材料属性值")]
        public void BulkInsertAttributeValue_Test()
        {
            
        }
       #endregion
	}
}